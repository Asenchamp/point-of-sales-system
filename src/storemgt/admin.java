/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package storemgt;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
/**
 *
 * @author user
 */
public class admin extends javax.swing.JFrame {
    private String adminname;
    /**
     * Creates new form admin
     * @param _username
     */
    public admin( String _username) {
        this.adminname = _username;
        initComponents();
        Userstable();
        Productstable();
        startScheduler();
        DebtorsTable();
        ExpensesTable();
        hello();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    Connection connection = null;
    PreparedStatement get = null;
    PreparedStatement get1 = null;
    PreparedStatement get2 = null;
    PreparedStatement get3 = null;
    PreparedStatement get4 = null;
    PreparedStatement insert = null;
    PreparedStatement update = null;
    PreparedStatement drop = null;
    ResultSet resultSet = null;
    ResultSet rs = null;
    ResultSet rst = null;
    ResultSet rst1 = null;
    ResultSet rst2 = null;
    
    
    private void Userstable(){
        int c;
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from register");
            resultSet = get.executeQuery();
            
            ResultSetMetaData Rss = resultSet.getMetaData();
            c = Rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)usersTable.getModel();
            df.setRowCount(0);
            
            while(resultSet.next()){
                Vector v2 = new Vector();
                for (int a=1; a<=c;a++){
                    v2.add(resultSet.getString("Name"));
                    v2.add(resultSet.getString("Admin"));
                }
                df.addRow(v2);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
    }
    
    private void Productstable(){
        int c;
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from Commodities");
            resultSet = get.executeQuery();
            
            ResultSetMetaData Rss = resultSet.getMetaData();
            c = Rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)productsTable.getModel();
            DefaultTableModel df1 = (DefaultTableModel)productsTable1.getModel();
            df.setRowCount(0);
            df1.setRowCount(0);
            
            while(resultSet.next()){
                Vector v2 = new Vector();
                for (int a=1; a<=c;a++){
                    v2.add(resultSet.getString("Id"));
                    v2.add(resultSet.getString("Name"));
                    v2.add(resultSet.getString("Quantity"));
                    v2.add(resultSet.getString("BuyingPrice"));
                    v2.add(resultSet.getString("SellingPrice"));
                }
                df.addRow(v2);
                df1.addRow(v2);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
    }
    
    private void DebtorsTable(){
        int c;
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from Debtors");
            resultSet = get.executeQuery();
            
            ResultSetMetaData Rss = resultSet.getMetaData();
            c = Rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)debtorsTable.getModel();
            df.setRowCount(0);
            
            while(resultSet.next()){
                Vector v2 = new Vector();
                for (int a=1; a<=c;a++){
                    v2.add(resultSet.getString("Name"));
                    v2.add(resultSet.getString("Location"));
                    v2.add(resultSet.getString("PhoneNumber"));
                }
                df.addRow(v2);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
    }
    
    private void ExpensesTable(){
        int c;
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from Expenses");
            resultSet = get.executeQuery();
            
            ResultSetMetaData Rss = resultSet.getMetaData();
            c = Rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)expensesTable.getModel();
            df.setRowCount(0);
            
            while(resultSet.next()){
                Vector v2 = new Vector();
                for (int a=1; a<=c;a++){
                    v2.add(resultSet.getString("Date"));
                    v2.add(resultSet.getString("Name"));
                    v2.add(resultSet.getString("Quantity"));
                }
                df.addRow(v2);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
    }
    
    private void hello(){
        adminName.setText("Hello "+adminname);
    }
    
    
    private String displayCurrentDate(){
        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
         return  currentDate.format(formatter);
        
    }
    
    
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        productName = new javax.swing.JTextField();
        productQty = new javax.swing.JTextField();
        productbuyinPrice = new javax.swing.JTextField();
        productsellingPrice = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();
        addbtn = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        productId = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        userName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        userAdminstat = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        userpsswd = new javax.swing.JPasswordField();
        jLabel10 = new javax.swing.JLabel();
        userconfpsswd = new javax.swing.JPasswordField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        usersTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        editQty = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        editBuyingPrice = new javax.swing.JTextField();
        editSellingPrice = new javax.swing.JTextField();
        editBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        productsTable1 = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        productId1 = new javax.swing.JTextField();
        changeBtn = new javax.swing.JButton();
        editproductsName = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        detbtorsName = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        Adddebtor = new javax.swing.JButton();
        deleteDebtor = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        debtorsTable = new javax.swing.JTable();
        debtorsLocation = new javax.swing.JTextField();
        debtors4nenum = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        expenseName = new javax.swing.JTextField();
        expensePrice = new javax.swing.JTextField();
        addExpense = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        expensesTable = new javax.swing.JTable();
        chngPsswdbtn = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        adminName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 36)); // NOI18N
        jLabel2.setText("M&B STORE");

        jButton1.setText("Sales");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTabbedPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 51), 2, true));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Product");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Quantity");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Buying Price");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Selling Price");

        productsTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        productsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Product", "Quantity", "Buying Price", "Selling Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        productsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(productsTable);

        addbtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addbtn.setText("Add");
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });

        deletebtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deletebtn.setText("Delete");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Id");

        productId.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(42, 42, 42))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(38, 38, 38)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(55, 55, 55)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(productQty, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(productName)
                            .addComponent(productId))
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(productsellingPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                            .addComponent(productbuyinPrice))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deletebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(productId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(productbuyinPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addbtn))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(productQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(productsellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deletebtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Products", jPanel1);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 0), 2, true));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Name");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Status");

        userAdminstat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "True", "False" }));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Password");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Confirm Password");

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        usersTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        usersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Status"
            }
        ));
        usersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usersTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(usersTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8))
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(userName)
                    .addComponent(userAdminstat, 0, 111, Short.MAX_VALUE))
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(userconfpsswd, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(33, 33, 33)
                        .addComponent(userpsswd, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(73, 73, 73))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(userpsswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(userAdminstat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(userconfpsswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Users", jPanel3);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 255, 255), 2, true));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Product");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Quantity");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("BuyingPrice");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("SellingPrice");

        editBuyingPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBuyingPriceActionPerformed(evt);
            }
        });

        editSellingPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSellingPriceActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        productsTable1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        productsTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Product", "Quantity", "Buying Price", "Selling Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        productsTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productsTable1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(productsTable1);

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setText("Id");

        productId1.setEditable(false);

        changeBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        changeBtn.setText("Change");
        changeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(42, 42, 42)
                        .addComponent(productId1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editBtn)
                        .addGap(72, 72, 72))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(44, 44, 44)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(editproductsName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(editQty, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(68, 68, 68)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editBuyingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addComponent(changeBtn)
                        .addGap(69, 69, 69))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(productId1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editBtn)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13)
                    .addComponent(editBuyingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editproductsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel14)
                    .addComponent(editSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Edit", jPanel2);

        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 2, true));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setText("Name");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setText("Location");

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel18.setText("Phone Number");

        Adddebtor.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Adddebtor.setText("Add");
        Adddebtor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdddebtorActionPerformed(evt);
            }
        });

        deleteDebtor.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteDebtor.setText("Delete");
        deleteDebtor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDebtorActionPerformed(evt);
            }
        });

        debtorsTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        debtorsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Location", "Phonenumber"
            }
        ));
        debtorsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                debtorsTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(debtorsTable);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(28, 28, 28)
                        .addComponent(detbtorsName, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(debtorsLocation)))
                .addGap(33, 33, 33)
                .addComponent(jLabel18)
                .addGap(18, 18, 18)
                .addComponent(debtors4nenum, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteDebtor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Adddebtor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(73, 73, 73))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(detbtorsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Adddebtor)
                    .addComponent(jLabel18)
                    .addComponent(debtors4nenum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel17)
                        .addComponent(debtorsLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(deleteDebtor))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 743, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 393, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Debtors", jPanel5);

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setText("Name");

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel20.setText("Price");

        addExpense.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addExpense.setText("Add");
        addExpense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExpenseActionPerformed(evt);
            }
        });

        expensesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Date", "Name", "Price"
            }
        ));
        jScrollPane5.setViewportView(expensesTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(expensePrice, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addComponent(expenseName))
                        .addGap(95, 95, 95)
                        .addComponent(addExpense)))
                .addContainerGap(142, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(expenseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(expensePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addExpense))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Expenses", jPanel4);

        chngPsswdbtn.setText("Change Password");
        chngPsswdbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chngPsswdbtnActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jButton4.setText("back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Logout");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        adminName.setEditable(false);
        adminName.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(27, 27, 27)
                                .addComponent(adminName, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chngPsswdbtn))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(94, 94, 94))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(123, 123, 123))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(chngPsswdbtn)
                    .addComponent(adminName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(11, 11, 11)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void chngPsswdbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chngPsswdbtnActionPerformed
        // TODO add your handling code here:
        dispose();
        ScreenManager.showScreen(new changePsswd());
        //new changePsswd().setVisible(true);
        
    }//GEN-LAST:event_chngPsswdbtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
        ScreenManager.showScreen(new sales(this.adminname));
        //new sales().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        ScreenManager.goBack();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        dispose();
        ScreenManager.showScreen(new Login());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void debtorsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_debtorsTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)debtorsTable.getModel();
        int selectedIndex = debtorsTable.getSelectedRow();

        detbtorsName.setText(df.getValueAt(selectedIndex, 0).toString());
        debtorsLocation.setText(df.getValueAt(selectedIndex, 1).toString());
        debtors4nenum.setText(df.getValueAt(selectedIndex, 2).toString());
    }//GEN-LAST:event_debtorsTableMouseClicked

    private void deleteDebtorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDebtorActionPerformed
        // TODO add your handling code here:
        String name = detbtorsName.getText();
        String location = debtorsLocation.getText();
        String phonenum = debtors4nenum.getText();
        if(name.equals("") | location.equals("") | phonenum.equals("")){
            JOptionPane.showMessageDialog(null, "all fields must be filled!");
        }else{
            try {
                connection = DatabaseConnection.getConnection();
                get = connection.prepareStatement("select * from Debtors where Name=? and PhoneNumber=? ");
                get.setString(1, name);
                get.setString(2, phonenum);
                resultSet = get.executeQuery();
                if(resultSet.next()){
                    
                    if(resultSet.getString("Amount").equals("0.0")){
                        drop = connection.prepareStatement("delete from Debtors where  Name=? and PhoneNumber=? ");
                        drop.setString(1, name);
                        drop.setString(2, phonenum);
                        drop.executeUpdate();
                        JOptionPane.showMessageDialog(null, "Debtor "+name+" is deleted");
                        DebtorsTable();
                        detbtorsName.setText("");
                        debtorsLocation.setText("");
                        debtors4nenum.setText("");
                    } else{
                        JOptionPane.showMessageDialog(null, name+" still has a debt of "+ resultSet.getString("Amount"));
                    }
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Debtor "+name+" is not available");
                }
            } catch (SQLException ex) {
                Logger.getLogger(admin.class.getName()).log(Level.SEVERE, null, ex);
            }   finally {
                try {
                    resultSet.close();
                    rs.close();
                    get.close();
                    update.close();
                    insert.close();
                    drop.close();
                    connection.close();
                } catch (Exception e) {
                }
            }
        }
        
        
    }//GEN-LAST:event_deleteDebtorActionPerformed

    private void AdddebtorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdddebtorActionPerformed
        // TODO add your handling code here:
        String name = detbtorsName.getText();
        String location = debtorsLocation.getText();
        String phonenum = debtors4nenum.getText();
        float Amount = 0;
        if(name.equals("") | location.equals("") | phonenum.equals("")){
            JOptionPane.showMessageDialog(null, "all fields must be filled!");
        } else{
            try {
                connection = DatabaseConnection.getConnection();
                
                get =connection.prepareStatement("select * from Debtors where Name=?");
                get.setString(1, name);
                resultSet = get.executeQuery();
                if(resultSet.next()){
                    JOptionPane.showMessageDialog(null, "use a different name");
                }else{
                    insert = connection.prepareStatement("insert into Debtors(Name,Location,PhoneNumber,Amount) values(?,?,?,?)");
                    insert.setString(1, name);
                    insert.setString(2, location);
                    insert.setString(3, phonenum);
                    insert.setString(4, String.valueOf(Amount));
                    insert.executeUpdate();

                    JOptionPane.showMessageDialog(null, "debtor " +name+ " is added");
                    DebtorsTable();
                    detbtorsName.setText("");
                    debtorsLocation.setText("");
                    debtors4nenum.setText("");                        
                }
                              
                
            } catch (SQLException ex) {
                Logger.getLogger(admin.class.getName()).log(Level.SEVERE, null, ex);
            }   finally {
                try {
                    resultSet.close();
                    rs.close();
                    get.close();
                    update.close();
                    insert.close();
                    drop.close();
                    connection.close();
                } catch (Exception e) {
                }
            }
        }
        
        
        
        
    }//GEN-LAST:event_AdddebtorActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
        String id = productId1.getText();
        String product = editproductsName.getText();
        String qty = editQty.getText();
        String bp = editBuyingPrice.getText();
        String sp = editSellingPrice.getText();

        if(qty.equals("") | bp.equals("") | product.equals("") | id.equals("") | sp.equals("")){
            JOptionPane.showMessageDialog(null, "all fields must be filled");
            System.out.println("id:"+id);
            System.out.println("product:"+product);
            System.out.println("qty:"+qty);
            System.out.println("bp:"+bp);
            System.out.println("sp:"+sp);
            
        } else {
            try {
                connection = DatabaseConnection.getConnection();
                get = connection.prepareStatement("select * from Commodities where Id = ?");
                get.setString(1, id);
                resultSet = get.executeQuery();
                if(resultSet.next()){
                    float newqty = Float.parseFloat(resultSet.getString("Quantity")) + Float.parseFloat(qty);

                    update = connection.prepareStatement("update Commodities set Quantity=?, SellingPrice=?, BuyingPrice=?, Name=? where Id=?");
                    update.setString(1, String.valueOf(newqty));
                    update.setString(2, sp);
                    update.setString(3, bp);
                    update.setString(4, product);
                    update.setString(5, id);
                    update.executeUpdate();

                    //insert new weekly commoditties
                    insert = connection.prepareStatement("insert into NewweeklyCommodities(Name,BuyingPrice,Quantity) values(?,?,?)");
                    insert.setString(1, product);
                    insert.setString(2, bp);
                    insert.setString(3, qty);
                    insert.executeUpdate();
                    
                    
                    Productstable();
                    JOptionPane.showMessageDialog(null, "new stock added  successfully");
                    productId1.setText("");
                    editproductsName.setText("");
                    editQty.setText("");
                    editBuyingPrice.setText("");
                    editSellingPrice.setText("");
                }else{
                    JOptionPane.showMessageDialog(null, "product not found.");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "enter correct data");
            } catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(null, "Enter correct format of the data");
            }finally {
                try {
                    resultSet.close();
                    rs.close();
                    get.close();
                    update.close();
                    insert.close();
                    drop.close();
                    connection.close();
                } catch (Exception e) {
                }
            }
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void usersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)usersTable.getModel();
        int selectedIndex = usersTable.getSelectedRow();

        userName.setText(df.getValueAt(selectedIndex, 0).toString());
    }//GEN-LAST:event_usersTableMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        String Name = userName.getText();

        try {
            if(Name.equals("")){
                JOptionPane.showMessageDialog(null, "no one is selected");
            } else {
                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete user?", "Warning",JOptionPane.YES_NO_OPTION);
                if (dialogResult == JOptionPane.YES_OPTION){
                    connection = DatabaseConnection.getConnection();
                    drop = connection.prepareStatement("delete from register where Name = ?");
                    drop.setString(1, Name);
                    drop.executeUpdate();

                    JOptionPane.showMessageDialog(null, "user deleted");
                    Userstable();
                }
                userName.setText("");
            }
        } catch (SQLException ex) {
            Logger.getLogger(admin.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                resultSet.close();
                rs.close();
                get.close();
                update.close();
                insert.close();
                drop.close();
                connection.close();
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String Name = userName.getText();
        String admin = (String) userAdminstat.getSelectedItem();
        String psswd = userpsswd.getText();
        String confpsswd = userconfpsswd.getText();

        if (psswd.equals(confpsswd) ){
            try {
                if (Name.equals("") | psswd.equals("") | confpsswd.equals("")){
                    JOptionPane.showMessageDialog(null, "All fields must be filled!");
                } else {
                    connection = DatabaseConnection.getConnection();
                    insert = connection.prepareStatement("insert into register(Name,Pin,Admin)values(?,?,?)");
                    insert.setString(1, Name);
                    insert.setString(2, psswd);
                    insert.setString(3, admin);
                    insert.executeUpdate();

                    Userstable();
                    JOptionPane.showMessageDialog(null, "User added successfully");
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "enter correct data");
            } finally {
                try {
                    resultSet.close();
                    rs.close();
                    get.close();
                    update.close();
                    insert.close();
                    drop.close();
                    connection.close();
                } catch (Exception e) {
                }
            }
        } else{
            JOptionPane.showMessageDialog(null, "pin not matching");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
        // TODO add your handling code here:
        String id = productId.getText();        
        String name = productName.getText();

        try {
            if(id.equals("")){
                JOptionPane.showMessageDialog(null, "nothing is selected");
            } else{
                connection = DatabaseConnection.getConnection();
                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete "+ name +" ?", "Warning",JOptionPane.YES_NO_OPTION);
                if (dialogResult == JOptionPane.YES_OPTION){
                    drop = connection.prepareStatement("delete from Commodities where Id = ?");
                    drop.setString(1, id);
                    drop.executeUpdate();

                    Productstable();
                    JOptionPane.showMessageDialog(null, name + "is deleted");
                    productId.setText("");
                    productName.setText("");
                    productQty.setText("");
                    productbuyinPrice.setText("");
                    productsellingPrice.setText("");
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(admin.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                resultSet.close();
                rs.close();
                get.close();
                update.close();
                insert.close();
                drop.close();
                connection.close();
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_deletebtnActionPerformed

    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
        // TODO add your handling code here:
        String name = productName.getText();
        String qty = productQty.getText();
        String bp = productbuyinPrice.getText();
        String sp = productsellingPrice.getText();

        try {
            if (name.equals("") | qty.equals("") | bp.equals("") | sp.equals("")){
                JOptionPane.showMessageDialog(null, "product must have all fields filled!");
            } else{
                connection = DatabaseConnection.getConnection();
                insert = connection.prepareStatement("insert into Commodities(Name,BuyingPrice,Quantity,SellingPrice)values(?,?,?,?)");
                insert.setString(1, name);
                insert.setString(2, bp);
                insert.setString(3, qty);
                insert.setString(4, sp);
                insert.executeUpdate();

                JOptionPane.showMessageDialog(null, name+" is added succcessfully");
                Productstable();
                productId.setText("");
                productName.setText("");
                productQty.setText("");
                productbuyinPrice.setText("");
                productsellingPrice.setText("");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "enter correct data");
        } catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Enter correct format of the data");
        } finally {
            try {
                resultSet.close();
                rs.close();
                get.close();
                update.close();
                insert.close();
                drop.close();
                connection.close();
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_addbtnActionPerformed

    private void productsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)productsTable.getModel();
        int selectedIndex = productsTable.getSelectedRow();

        productId.setText(df.getValueAt(selectedIndex, 0).toString());
        productName.setText(df.getValueAt(selectedIndex, 1).toString());
        productQty.setText(df.getValueAt(selectedIndex, 2).toString());
        productbuyinPrice.setText(df.getValueAt(selectedIndex, 3).toString());
        productsellingPrice.setText(df.getValueAt(selectedIndex, 4).toString());
    }//GEN-LAST:event_productsTableMouseClicked

    private void productsTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)productsTable1.getModel();
        int selectedIndex = productsTable1.getSelectedRow();

        productId1.setText(df.getValueAt(selectedIndex, 0).toString());
        editproductsName.setText(df.getValueAt(selectedIndex, 1).toString());
        editQty.setText(df.getValueAt(selectedIndex, 2).toString());
        editBuyingPrice.setText(df.getValueAt(selectedIndex, 3).toString());
        editSellingPrice.setText(df.getValueAt(selectedIndex, 4).toString());
    }//GEN-LAST:event_productsTable1MouseClicked

    private void editSellingPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSellingPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editSellingPriceActionPerformed

    private void editBuyingPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBuyingPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editBuyingPriceActionPerformed

    private void changeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeBtnActionPerformed
        // TODO add your handling code here:
        String product = editproductsName.getText();
        String id = productId1.getText();
        String qty = editQty.getText();
        String bp = editBuyingPrice.getText();
        String sp = editSellingPrice.getText();

        if(qty.equals("") | bp.equals("") | id.equals("") | product.equals("") | sp.equals("")){
            JOptionPane.showMessageDialog(null, "all fields must be filled");
        } else {
            try {
                connection = DatabaseConnection.getConnection();
                get = connection.prepareStatement("select * from Commodities where Id = ?");
                get.setString(1, id);
                resultSet = get.executeQuery();
                while(resultSet.next()){

                    update = connection.prepareStatement("update Commodities set Quantity=?, SellingPrice=?, BuyingPrice=? , Name=? where Id=?");
                    update.setString(1, qty);
                    update.setString(2, sp);
                    update.setString(3, bp);
                    update.setString(4, product);
                    update.setString(5, id);
                    update.executeUpdate();

                    Productstable();
                    JOptionPane.showMessageDialog(null, "updated successfully");
                    productId1.setText("");
                    editproductsName.setText("");
                    editQty.setText("");
                    editBuyingPrice.setText("");
                    editSellingPrice.setText("");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "enter correct data");
            } catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(null, "Enter correct format of the data");
            }   finally {
                try {
                    resultSet.close();
                    rs.close();
                    get.close();
                    update.close();
                    insert.close();
                    drop.close();
                    connection.close();
                } catch (Exception e) {
                }
            }
        }
        
        
        
    }//GEN-LAST:event_changeBtnActionPerformed

    private void addExpenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExpenseActionPerformed
        try {
            // TODO add your handling code here:
            connection = DatabaseConnection.getConnection();
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to add exepense of "+expenseName.getText()+"?", "Warning",JOptionPane.YES_NO_OPTION);
                if(dialogResult == JOptionPane.YES_OPTION){
                    insert = connection.prepareStatement("insert into Expenses(Date,Name,Quantity) values(?,?,?)");
                    insert.setString(1, displayCurrentDate());
                    insert.setString(2, expenseName.getText());
                    insert.setString(3, expensePrice.getText());
                    insert.executeUpdate();
                    
                    expenseName.setText("");
                    expensePrice.setText("");
                    JOptionPane.showMessageDialog(null, "expense added");
                    ExpensesTable();
                }else{
                    expenseName.setText("");
                    expensePrice.setText("");
                }
            
        } catch (SQLException ex) {
            Logger.getLogger(admin.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
    }//GEN-LAST:event_addExpenseActionPerformed

    public  List<String> getProducts(){
        List<String> products = new ArrayList<>();
        String query = "select Name from Commodities";
        
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement(query);
            resultSet = get.executeQuery();
            
            while(resultSet.next()){
                products.add(resultSet.getString("Name"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        }  finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }
            
        }
        return products;
    }
   
    
    private void startScheduler(){
        ScheduledExecutorService scheduler;
        scheduler = Executors.newSingleThreadScheduledExecutor();
        //scheduler.scheduleAtFixedRate(this:: generateReport, calculateInitialDelay(),7, TimeUnit.DAYS);
        scheduler.scheduleAtFixedRate(this::generateReport, 0, 1, TimeUnit.MINUTES);
    }
    
    private long calculateInitialDelay(){
        LocalDate today = LocalDate.now();
        LocalDate nextSunday = today.with(java.time.DayOfWeek.SUNDAY);
        if(today.getDayOfWeek() == java.time.DayOfWeek.SUNDAY){
            nextSunday = nextSunday.plusWeeks(1);
        }
        return java.time.Duration.between(today.atStartOfDay(), nextSunday.atStartOfDay()).toHours();
    }
    
    private void generateReport() {
        try {
            connection = DatabaseConnection.getConnection();
            LocalDate today = LocalDate.now();
            LocalDate weekAgo = today.minusDays(7);
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            
            System.out.println("today "+today.format(formatter));
            System.out.println("weekago "+weekAgo.format(formatter));
            
            float grandtotal = 0;
            float totaldebts = 0;
            float totalnewstok = 0;
            float totalexpenses = 0;
            StringBuilder report = new StringBuilder();
            
            report.append("CURRENT STOCK REPORT\n");
            report.append("------------------------------\n");
            report.append("Name").append("\t\t").append("Total Quantity").append("\n");
            get2 = connection.prepareStatement("select * from Commodities");
            rst = get2.executeQuery();
            while(rst.next()){
                report.append(rst.getString("Name")).append("\t\t").append(rst.getFloat("Quantity")).append("kgs").append("\n");
            }
            
            report.append("\n\n").append("WEEKLY SALES REPORT\n");
            report.append("------------------------------\n");

            String qry = "SELECT Name, SUM(Quantity) AS TotalQuantity, SUM(Total) AS TotalAmount FROM sales WHERE Date BETWEEN ? AND ? GROUP BY Name";
            get = connection.prepareStatement(qry);
            get.setString(1, weekAgo.format(formatter));
            get.setString(2, today.format(formatter));
            resultSet = get.executeQuery();

            while (resultSet.next()) {
                String name = resultSet.getString("Name");
                float totalQuantity = resultSet.getFloat("TotalQuantity");
                float total = resultSet.getFloat("TotalAmount");
                report.append(name).append("\t\t").append(totalQuantity).append("kgs").append("\t\t").append("shs.").append(total).append("\n");
                grandtotal += total;
            }
            report.append("------------------------------\n");
            report.append("WEEKLY SALES").append("\t\t\t\t").append("shs.").append(grandtotal).append("\n\n");
            get1 = connection.prepareStatement("select * from Debtors");
            rs = get1.executeQuery();
            
            get3 = connection.prepareStatement("select * from NewweeklyCommodities");
            rst1 = get3.executeQuery();
            if(rst1.next()){
                report.append("NEW STOCK \n");
                report.append("Name").append("\t\t").append("Quantity").append("\t\t").append("Buying Price").append("\n");
                do{
                    report.append(rst1.getString("Name")).append("\t\t").append("shs.").append(rst1.getFloat("Quantity")).append("\t\t").append("shs.").append(rst1.getFloat("BuyingPrice")).append("\n");
                    totalnewstok += (rst1.getFloat("Quantity")*rst1.getFloat("BuyingPrice"));
                }while(rst1.next());
                report.append("------------------------------\n");
                report.append("TOTAL AMMOUNT").append("\t\t\t\t").append("shs.").append(totalnewstok).append("\n\n");
            }
            
            get4 = connection.prepareStatement("SELECT * FROM Expenses WHERE Date BETWEEN ? AND ?");
            get4.setString(1, weekAgo.format(formatter));
            get4.setString(2, today.format(formatter));
            rst2 = get4.executeQuery();
            if(rst2.next()){
                report.append("EXPENSES \n");
                report.append("Name").append("\t\t").append("Price").append("\n");
                do{
                    report.append(rst2.getString("Name")).append("\t\t").append("shs.").append(rst2.getFloat("Quantity")).append("\n");
                    totalexpenses += rst2.getFloat("Quantity");
                }while(rst2.next());
                report.append("------------------------------\n");
                report.append("TOTAL EXPENSES").append("\t\t\t\t").append("shs.").append(totalexpenses).append("\n\n");
            }
            
            
            report.append("DEBTORS \n");
            report.append("Name").append("\t\t").append("Total Amount").append("\n");
            while(rs.next()){
                report.append(rs.getString("Name")).append("\t\t").append("shs.").append(rs.getFloat("Amount")).append("\n");
                System.out.println("report made \n"+ report);
                totaldebts += rs.getFloat("Amount");
            }
            report.append("------------------------------\n");
            report.append("TOTAL DEBTS").append("\t\t\t\t").append("shs.").append(totaldebts).append("\n\n");
            
            System.out.println("writting to pdf");
            textWriter.writeTotxt(report.toString(), "weekly_sales_report_" + today + ".txt");
            System.out.println("written to pdf2");
        } catch (SQLException ex) {
            //Logger.getLogger(ReportGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }   finally {
                try {
                    resultSet.close();
                    rs.close();
                    rst.close();
                    get.close();
                    get1.close();
                    get2.close();
                    update.close();
                    insert.close();
                    drop.close();
                    connection.close();
                } catch (Exception e) {
                }   
            }
    }
    
    
    /**
    private void writeTotxt(String content, String fileName) {
        // Define the directory where the report will be saved
        String directoryPath = "C:/Users/asenl/Desktop/projects/javaprojects/reports";
        // Create the directory if it does not exist
        File directory = new File(directoryPath);
        if (!directory.exists()) {
            directory.mkdirs();
        }
        
        File reportFile = new File(directoryPath, fileName);
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(reportFile))) {
            writer.write(content);
            System.out.println("File written successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }
        File file = new File(directoryPath, fileName);
        boolean result = file.setReadOnly();

        if (result) {
            System.out.println("File is now read-only.");
        } else {
            System.out.println("Failed to make the file read-only.");
        }
        
    }
    
    
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
 
        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
          //  public void run() {
                //new admin().setVisible(false);
            //}
        //});
    //}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Adddebtor;
    private javax.swing.JButton addExpense;
    private javax.swing.JButton addbtn;
    private javax.swing.JTextField adminName;
    private javax.swing.JButton changeBtn;
    private javax.swing.JButton chngPsswdbtn;
    private javax.swing.JTextField debtors4nenum;
    private javax.swing.JTextField debtorsLocation;
    private javax.swing.JTable debtorsTable;
    private javax.swing.JButton deleteDebtor;
    private javax.swing.JButton deletebtn;
    private javax.swing.JTextField detbtorsName;
    private javax.swing.JButton editBtn;
    private javax.swing.JTextField editBuyingPrice;
    private javax.swing.JTextField editQty;
    private javax.swing.JTextField editSellingPrice;
    private javax.swing.JTextField editproductsName;
    private javax.swing.JTextField expenseName;
    private javax.swing.JTextField expensePrice;
    private javax.swing.JTable expensesTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField productId;
    private javax.swing.JTextField productId1;
    private javax.swing.JTextField productName;
    private javax.swing.JTextField productQty;
    private javax.swing.JTextField productbuyinPrice;
    private javax.swing.JTable productsTable;
    private javax.swing.JTable productsTable1;
    private javax.swing.JTextField productsellingPrice;
    private javax.swing.JComboBox<String> userAdminstat;
    private javax.swing.JTextField userName;
    private javax.swing.JPasswordField userconfpsswd;
    private javax.swing.JPasswordField userpsswd;
    private javax.swing.JTable usersTable;
    // End of variables declaration//GEN-END:variables
}
