/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package storemgt;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.lang.NullPointerException;
import java.sql.ResultSetMetaData;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;


/**
 *
 * @author user
 */
public class sales extends javax.swing.JFrame {
    private String username;
    /**
     * Creates new form sales
     * @param _username
     */
    public sales(String _username) {
        this.username = _username;
        initComponents();
        populateProductCombobox();
        populateDebtorsCombobox();
        Pricestable();
        Salestable();
        DebtorsBalancetable();
        DebtorsRecordstable();
        DebtorsPaymentstable();
        hello();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        salesqty = new javax.swing.JTextField();
        salesbtn = new javax.swing.JButton();
        salesId = new javax.swing.JTextField();
        salesProductcombo = new javax.swing.JComboBox<>();
        deletebtn = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        salesTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pricesTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        debtorsBalanceTable = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        debtorsPaymentsTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        payDebtorsName = new javax.swing.JComboBox<>();
        payDebtorsAmmont = new javax.swing.JTextField();
        paymentsbtn = new javax.swing.JButton();
        searchPaymentsbtn = new javax.swing.JButton();
        payDebtorsDate = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        paymentId = new javax.swing.JTextField();
        deletePaymentbtn = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        debtorsRecordsTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        searchRecbtn = new javax.swing.JButton();
        debtorsRecDate = new com.toedter.calendar.JDateChooser();
        searchDebtorsName = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        chngPsswdbtn = new javax.swing.JButton();
        backbtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        debtorsName = new javax.swing.JComboBox<>();
        debtSale = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        clearArea = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        recAndinvoArea = new javax.swing.JTextArea();
        printArea = new javax.swing.JButton();
        reciAndinvoowner = new javax.swing.JTextField();
        usersName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 2, 36)); // NOI18N
        jLabel1.setText("M&B STORE");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Sales"));

        salesbtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        salesbtn.setText("Sale");
        salesbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesbtnActionPerformed(evt);
            }
        });

        salesId.setEditable(false);
        salesId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesIdActionPerformed(evt);
            }
        });

        salesProductcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesProductcomboActionPerformed(evt);
            }
        });

        deletebtn.setText("Delete");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        jTabbedPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 255, 255), 2, true));

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 0), 2, true));

        salesTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        salesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Date", "Product", "Quantity", "SellingPrice", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        salesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                salesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(salesTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sales", jPanel1);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 0), 2, true));

        pricesTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        pricesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Available Quantity", "Selling Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(pricesTable);
        if (pricesTable.getColumnModel().getColumnCount() > 0) {
            pricesTable.getColumnModel().getColumn(2).setHeaderValue("Selling Price");
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Prices", jPanel2);

        jTabbedPane2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 51), 2, true));

        jPanel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 51), 1, true));

        debtorsBalanceTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        debtorsBalanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(debtorsBalanceTable);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(133, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 259, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(14, 14, 14)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(62, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab("Debtors", jPanel7);

        jPanel8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 0), 1, true));

        debtorsPaymentsTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        debtorsPaymentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Date", "Name", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        debtorsPaymentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                debtorsPaymentsTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(debtorsPaymentsTable);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Name");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Date");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Ammount");

        paymentsbtn.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        paymentsbtn.setText("Pay");
        paymentsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentsbtnActionPerformed(evt);
            }
        });

        searchPaymentsbtn.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        searchPaymentsbtn.setText("Search");
        searchPaymentsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPaymentsbtnActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Id");

        paymentId.setEditable(false);

        deletePaymentbtn.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        deletePaymentbtn.setText("Delete");
        deletePaymentbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePaymentbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(paymentId, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(deletePaymentbtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(payDebtorsName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(payDebtorsAmmont)
                            .addComponent(payDebtorsDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(paymentsbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(searchPaymentsbtn)))
                .addGap(23, 23, 23))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(payDebtorsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(payDebtorsDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(payDebtorsAmmont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paymentsbtn)
                            .addComponent(searchPaymentsbtn))))
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(paymentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(deletePaymentbtn)
                        .addContainerGap())))
        );

        jTabbedPane2.addTab("Payments", jPanel8);

        jPanel9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 255), 1, true));

        debtorsRecordsTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        debtorsRecordsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Name", "Product", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane6.setViewportView(debtorsRecordsTable);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Name");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Date");

        searchRecbtn.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        searchRecbtn.setText("Search");
        searchRecbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchRecbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchDebtorsName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(debtorsRecDate, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(searchRecbtn)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(searchDebtorsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(debtorsRecDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addComponent(searchRecbtn)
                .addContainerGap(76, Short.MAX_VALUE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Records", jPanel9);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPane1.addTab("Debts", jPanel6);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Quantity");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Id");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Product");

        chngPsswdbtn.setText("Change Password");
        chngPsswdbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chngPsswdbtnActionPerformed(evt);
            }
        });

        backbtn.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        backbtn.setText("back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        jButton2.setText("Logout");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("::::");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Name");

        debtSale.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        debtSale.setText("Debts");
        debtSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debtSaleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(backbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(salesProductcombo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(salesId, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(135, 135, 135)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(chngPsswdbtn)))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(debtorsName, 0, 144, Short.MAX_VALUE)
                                            .addComponent(salesqty))
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(14, 14, 14)
                                                .addComponent(debtSale)
                                                .addGap(69, 69, 69)
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(salesbtn)
                                                    .addComponent(deletebtn)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(13, 13, 13)))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(18, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(chngPsswdbtn)
                            .addComponent(salesId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(salesProductcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jButton2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(salesqty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deletebtn))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(debtorsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(salesbtn)
                            .addComponent(debtSale))
                        .addGap(35, 35, 35))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(backbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 153), 3, true));

        clearArea.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        clearArea.setText("Clear");
        clearArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAreaActionPerformed(evt);
            }
        });

        recAndinvoArea.setBackground(new java.awt.Color(204, 204, 204));
        recAndinvoArea.setColumns(20);
        recAndinvoArea.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        recAndinvoArea.setRows(5);
        jScrollPane3.setViewportView(recAndinvoArea);

        printArea.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        printArea.setText("Print");
        printArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printAreaActionPerformed(evt);
            }
        });

        reciAndinvoowner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reciAndinvoownerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearArea, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(reciAndinvoowner, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(printArea)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clearArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printArea)
                    .addComponent(reciAndinvoowner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        usersName.setEditable(false);
        usersName.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(133, 133, 133)
                        .addComponent(usersName, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(usersName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    Connection connection = null;
    PreparedStatement get = null;
    PreparedStatement get1 = null;
    PreparedStatement get2 = null;
    PreparedStatement insert = null;
    PreparedStatement insert1 = null;
    PreparedStatement update = null;
    PreparedStatement update1 = null;
    PreparedStatement drop = null;
    ResultSet resultSet = null;
    ResultSet rs = null;
    ResultSet rst = null;
    
    public  List<String> getProducts(){
        List<String> products = new ArrayList<>();
        String query = "select Name from Commodities";
        
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement(query);
            resultSet = get.executeQuery();
            
            while(resultSet.next()){
                products.add(resultSet.getString("Name"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        }  finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }
            
        }
        return products;
    }
    
    private void populateProductCombobox(){
        List<String> products = getProducts();
        for (String product: products){
            salesProductcombo.addItem(product);
        }
    }
    
    public  List<String> getDebtorsName(){
        List<String> names = new ArrayList<>();
        String query = "select Name from Debtors";
        
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement(query);
            resultSet = get.executeQuery();
            
            while(resultSet.next()){
                names.add(resultSet.getString("Name"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        }  finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }
            
        }
        return names;
    }
    
    private void populateDebtorsCombobox(){
        List<String> names = getDebtorsName();
        for (String name: names){
            debtorsName.addItem(name);
            payDebtorsName.addItem(name);
            searchDebtorsName.addItem(name);
        }
    }
    
    private void Pricestable(){
        int c;
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from Commodities");
            resultSet = get.executeQuery();
            
            ResultSetMetaData Rss = resultSet.getMetaData();
            c = Rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)pricesTable.getModel();
            df.setRowCount(0);
            
            while(resultSet.next()){
                Vector v2 = new Vector();
                for (int a=1; a<=c;a++){
                    v2.add(resultSet.getString("Name"));
                    v2.add(resultSet.getString("Quantity"));
                    v2.add(resultSet.getString("SellingPrice"));
                }
                df.addRow(v2);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
    }
    
    private void Salestable(){
        int c;
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from sales");
            resultSet = get.executeQuery();
            
            ResultSetMetaData Rss = resultSet.getMetaData();
            c = Rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)salesTable.getModel();
            df.setRowCount(0);
            
            while(resultSet.next()){
                Vector v2 = new Vector();
                for (int a=1; a<=c;a++){
                    v2.add(resultSet.getString("Id"));
                    v2.add(resultSet.getString("Date"));
                    v2.add(resultSet.getString("Name"));
                    v2.add(resultSet.getString("Quantity"));
                    v2.add(resultSet.getString("UnitPrice"));
                    v2.add(resultSet.getString("Total"));
                }
                df.addRow(v2);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
        
    }
    
    private void DebtorsBalancetable(){
        int c;
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from Debtors");
            resultSet = get.executeQuery();
            
            ResultSetMetaData Rss = resultSet.getMetaData();
            c = Rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)debtorsBalanceTable.getModel();
            df.setRowCount(0);
            
            while(resultSet.next()){
                Vector v2 = new Vector();
                if(!resultSet.getString("Amount").equals("0.0")){
                    for (int a=1; a<=c;a++){
                        v2.add(resultSet.getString("Name"));
                        v2.add(resultSet.getString("Amount"));
                    }
                    df.addRow(v2);
                }
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
    }
    
    private void DebtorsRecordstable(){
        int c;
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from productsDebtors");
            resultSet = get.executeQuery();
            
            ResultSetMetaData Rss = resultSet.getMetaData();
            c = Rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)debtorsRecordsTable.getModel();
            df.setRowCount(0);
            
            while(resultSet.next()){
                Vector v2 = new Vector();
                for (int a=1; a<=c;a++){
                    v2.add(resultSet.getString("Date"));
                    v2.add(resultSet.getString("Name"));                    
                    v2.add(resultSet.getString("Product"));
                    v2.add(resultSet.getString("Quantity"));
                }
                df.addRow(v2);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
    }
    
    private void DebtorsPaymentstable(){
        int c;
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from DebtorPayments");
            resultSet = get.executeQuery();
            
            ResultSetMetaData Rss = resultSet.getMetaData();
            c = Rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)debtorsPaymentsTable.getModel();
            df.setRowCount(0);
            
            while(resultSet.next()){
                Vector v2 = new Vector();
                for (int a=1; a<=c;a++){
                    v2.add(resultSet.getString("Id"));
                    v2.add(resultSet.getString("Date"));
                    v2.add(resultSet.getString("Name"));                    
                    v2.add(resultSet.getString("Ammount"));
                }
                df.addRow(v2);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
    }
    
    private void hello(){
        usersName.setText("Hello "+username);
    }
    
    private String displayCurrentDate(){
        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
         return  currentDate.format(formatter);
        
    }
    
    private String displayCurrentTime(){
        LocalTime time = LocalTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH-mm-ss");
        return time.format(formatter);
    }
    
    private void generateReciptAndinvo(String type) throws SQLException{
        float gtotal = 0;
        float total = 0;
        try {
            connection = DatabaseConnection.getConnection();
            String qry = "SELECT Product, SUM(Quantity) AS TotalQuantity, SUM(Ammount) AS TotalAmount FROM receiptAndinvo GROUP BY Product";
            get = connection.prepareStatement(qry);
            resultSet = get.executeQuery();

            StringBuilder report = new StringBuilder();
            report.append("PRODUCTS ").append(type).append(" \n");
            report.append("*************************************************\n");
            report.append("Product").append("\t").append("Quantity").append("\t").append("Total\n");

            while (resultSet.next()) {
                String name = resultSet.getString("Product");
                float totalQuantity = resultSet.getFloat("TotalQuantity");
                if(type.equals("INVOICE")){
                    get1 = connection.prepareStatement("select SellingPrice from Commodities where Name = ?");
                    get1.setString(1, name);
                    rs = get1.executeQuery();
                    if(rs.next()){
                        total +=  (totalQuantity*rs.getFloat("SellingPrice"));
                    }
                    
                } else{
                    total += resultSet.getFloat("TotalAmount");
                }
                gtotal += total;
                report.append(name).append("\t").append(totalQuantity).append("kgs").append("\t").append("shs.").append(total).append("\n");
                total = 0;
            }
            //System.out.println("total "+gtotal);
            report.append("----------------------------------------------------------").append("\n");
            report.append("GrandTotal ").append("\t\t").append("shs.").append(gtotal);
            recAndinvoArea.setText(report.toString());
            
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private String receiptAndinvoice(String Ammount,String Product,String Quantity){
        StringBuilder receiptAndinvo = new StringBuilder();
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select top 1 * from receiptAndinvo order by Id desc");
            resultSet = get.executeQuery();
            if(resultSet.next()){
                if(Float.valueOf(resultSet.getString("Ammount")) == 0.0 && Float.valueOf(Ammount) == 0.0){// they are all zero
                    insert = connection.prepareStatement("insert into receiptAndinvo(Product,Ammount,Quantity) values(?,?,?)");
                    insert.setString(1,Product);
                    insert.setString(2, Ammount);
                    insert.setString(3, Quantity);
                    insert.executeUpdate();
                    generateReciptAndinvo("INVOICE");
                } else if(Float.valueOf(resultSet.getString("Ammount")) > 0.0 && Float.valueOf(Ammount) > 0.0){// when they are greater than zero
                    insert = connection.prepareStatement("insert into receiptAndinvo(Product,Ammount,Quantity) values(?,?,?)");
                    insert.setString(1,Product);
                    insert.setString(2, Ammount);
                    insert.setString(3, Quantity);
                    insert.executeUpdate();
                    generateReciptAndinvo("RRECEIPT");                    
                } else if(Float.valueOf(resultSet.getString("Ammount")) > 0.0 && Float.valueOf(Ammount) == 0.0){
                    
                    drop = connection.prepareStatement("delete from receiptAndinvo");
                    drop.executeUpdate();
                    
                    insert = connection.prepareStatement("insert into receiptAndinvo(Product,Ammount,Quantity) values(?,?,?)");
                    insert.setString(1,Product);
                    insert.setString(2, Ammount);
                    insert.setString(3, Quantity);
                    insert.executeUpdate();
                    generateReciptAndinvo("INVOICE");  
                } else if(Float.valueOf(resultSet.getString("Ammount")) == 0.0 && Float.valueOf(Ammount) > 0.0){
                    
                    drop = connection.prepareStatement("delete from receiptAndinvo");
                    drop.executeUpdate();
                
                    insert = connection.prepareStatement("insert into receiptAndinvo(Product,Ammount,Quantity) values(?,?,?)");
                    insert.setString(1,Product);
                    insert.setString(2, Ammount);
                    insert.setString(3, Quantity);
                    insert.executeUpdate();
                    generateReciptAndinvo("RECEIPT");  
                }
            } else{
                if(Float.valueOf(Ammount) > 0.0){
                    insert = connection.prepareStatement("insert into receiptAndinvo(Product,Ammount,Quantity) values(?,?,?)");
                    insert.setString(1,Product);
                    insert.setString(2, Ammount);
                    insert.setString(3, Quantity);
                    insert.executeUpdate();
                    generateReciptAndinvo("RECEIPT");                  
                } else{
                    insert = connection.prepareStatement("insert into receiptAndinvo(Product,Ammount,Quantity) values(?,?,?)");
                    insert.setString(1,Product);
                    insert.setString(2, Ammount);
                    insert.setString(3, Quantity);
                    insert.executeUpdate();
                    generateReciptAndinvo("INVOICE");  
                }
                
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        }
        return receiptAndinvo.toString();
    }
    
    
    private void salesbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesbtnActionPerformed
        // TODO add your handling code here:
        String product = (String) salesProductcombo.getSelectedItem();
        String qty = salesqty.getText();
        //String date = displayCurrentDate();
        try {
            if(qty.equals("")){
                JOptionPane.showMessageDialog(null, "sale must have a quantity");
            } else{
                System.out.println("product: "+ product);
                connection = DatabaseConnection.getConnection();
                get = connection.prepareStatement("select * from Commodities where Name = ?");
                get.setString(1, product);
                resultSet = get.executeQuery();

                while(resultSet.next()){
                    float newqty = Float.parseFloat(resultSet.getString("Quantity")) - Float.parseFloat(qty);
                    String Newqty = String.valueOf(newqty);
                    float total = Float.parseFloat(resultSet.getString("SellingPrice")) * Float.parseFloat(qty);
                    String toTal = String.valueOf(total);

                    update = connection.prepareStatement("update Commodities set Quantity = ? where Name = ? ");
                    update.setString(1, Newqty);
                    update.setString(2, product);
                    update.executeUpdate();

                    insert = connection.prepareStatement("insert into sales(Date,Name,Quantity,UnitPrice,Total)values(?,?,?,?,?)");
                    insert.setString(1,displayCurrentDate());
                    insert.setString(2, product);
                    insert.setString(3, qty);
                    insert.setString(4, resultSet.getString("SellingPrice"));
                    insert.setFloat(5, total);
                    insert.executeUpdate();
                    receiptAndinvoice(String.valueOf(total),product,qty);
                    salesqty.setText("");
                    Salestable();
                    Pricestable();
                    JOptionPane.showMessageDialog(null, "sale added successfully");                
            }
            }
            
        } catch (SQLException ex) {
            
        } catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Enter numbers pliz");
        }  finally {
            try {
                resultSet.close();
                get.close();
                update.close();
                insert.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
        
    }//GEN-LAST:event_salesbtnActionPerformed

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
        // TODO add your handling code here:
        String product = (String) salesProductcombo.getSelectedItem();
        String qty = salesqty.getText();
        String Id = salesId.getText();
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from sales where Id = ?");
            get.setString(1, Id);
            resultSet = get.executeQuery();
            if(resultSet.next()){
                if(resultSet.getString("Total").equals("0.0")){
                    JOptionPane.showMessageDialog(null, "can't delete a debt sale");
                }else{
                    get = connection.prepareStatement("select * from Commodities where Name = ?");
                    get.setString(1, product);
                    rs = get.executeQuery();
                    while(rs.next()){
                        float newqty = Float.parseFloat(rs.getString("Quantity")) + Float.parseFloat(qty);
                        String Newqty = String.valueOf(newqty);

                        drop = connection.prepareStatement("delete from sales where Id = ?");
                        drop.setString(1, Id);
                        drop.executeUpdate();

                        update = connection.prepareStatement("update Commodities set Quantity = ? where Name = ? ");
                        update.setString(1, Newqty);
                        update.setString(2, product);
                        update.executeUpdate();
                        salesId.setText("");
                        salesqty.setText("");
                        Salestable();
                        Pricestable();
                        JOptionPane.showMessageDialog(null, "sale deleted successfully");  
                    }
                }
            } else{
                JOptionPane.showMessageDialog(null, " no sale selected");
            }
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        }   finally {
            try {
                resultSet.close();
                rs.close();
                get.close();
                update.close();
                insert.close();
                drop.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
    }//GEN-LAST:event_deletebtnActionPerformed

    private void chngPsswdbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chngPsswdbtnActionPerformed
        // TODO add your handling code here:
        dispose();
        ScreenManager.showScreen(new changePsswd());
        //new changePsswd().setVisible(true);
    }//GEN-LAST:event_chngPsswdbtnActionPerformed

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        // TODO add your handling code here:
        ScreenManager.goBack();
    }//GEN-LAST:event_backbtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        dispose();
        ScreenManager.showScreen(new Login());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
        ScreenManager.showScreen(new calc());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void salesProductcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesProductcomboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salesProductcomboActionPerformed

    private void salesIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salesIdActionPerformed

    private void debtSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debtSaleActionPerformed
        // TODO add your handling code here:
        String product = (String) salesProductcombo.getSelectedItem();
        String qty = salesqty.getText();
        String name = (String)debtorsName.getSelectedItem();
        
        try {
            if(qty.equals("")){
                JOptionPane.showMessageDialog(null, product+" debt must have a quantity");
            } else{
                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to debt "+name+" "+qty+"kgs of "+product+"?", "Warning",JOptionPane.YES_NO_OPTION);
                if(dialogResult == JOptionPane.YES_OPTION){
                       connection = DatabaseConnection.getConnection();
                       get = connection.prepareStatement("select * from Commodities where Name = ?");
                       get.setString(1, product);
                       resultSet = get.executeQuery();

                       while(resultSet.next()){
                           float newqty = Float.parseFloat(resultSet.getString("Quantity")) - Float.parseFloat(qty);
                           String Newqty = String.valueOf(newqty);
                           float Total = Float.parseFloat(resultSet.getString("SellingPrice")) * Float.parseFloat(qty);
                           float total = 0;

                           update = connection.prepareStatement("update Commodities set Quantity = ? where Name = ? ");
                           update.setString(1, Newqty);
                           update.setString(2, product);
                           update.executeUpdate();

                           insert = connection.prepareStatement("insert into sales(Date,Name,Quantity,UnitPrice,Total)values(?,?,?,?,?)");
                           insert.setString(1,displayCurrentDate());
                           insert.setString(2, product);
                           insert.setString(3, qty);
                           insert.setString(4, resultSet.getString("SellingPrice"));
                           insert.setFloat(5, total);
                           insert.executeUpdate();
                           receiptAndinvoice(String.valueOf(total),product,qty);

                           //get the last added sale
                           get1 = connection.prepareStatement("select top 1 * from sales order by Id desc");
                           rs = get1.executeQuery();
                           if(rs.next()){
                               //inserting in productsDebtors table
                               insert1 = connection.prepareStatement("insert into productsDebtors(Name,Date,Productid,Product,Quantity)values(?,?,?,?,?)");
                               insert1.setString(1, name);
                               insert1.setString(2,rs.getString("Date"));
                               insert1.setString(3, rs.getString("Id"));
                               insert1.setString(4, product);
                               insert1.setString(5, qty);
                               insert1.executeUpdate();
                               //updating debtors table
                               get2 = connection.prepareStatement("select * from Debtors where Name=?");
                               get2.setString(1, name);
                               rst = get2.executeQuery();
                               if(rst.next()){
                                   float ammount = Float.parseFloat(rst.getString("Amount")) + Total;
                                   String Ammount = String.valueOf(ammount);
                                   update1 = connection.prepareStatement("update Debtors set Amount = ? where Name = ? ");
                                   update1.setString(1, Ammount);
                                   update1.setString(2, name);
                                   update1.executeUpdate();
                               }                        
                           }
                           salesqty.setText("");
                           Pricestable();
                           Salestable();
                           DebtorsBalancetable();
                           DebtorsRecordstable();
                           DebtorsPaymentstable();
                           JOptionPane.showMessageDialog(null, "Debt added successfully");                
                   }
                } else{

                }
            }
            
        } catch (SQLException ex) {
            
        } catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Enter numbers pliz");
        }  finally {
            try {
                resultSet.close();
                rs.close();
                rst.close();
                get.close();
                get1.close();
                get2.close();
                update.close();
                update1.close();
                insert.close();
                insert1.close();
                connection.close();
            } catch (Exception e) {
            }   
        }    
    }//GEN-LAST:event_debtSaleActionPerformed

    private void paymentsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentsbtnActionPerformed
        // TODO add your handling code here:
        String name = (String)payDebtorsName.getSelectedItem();
        String Amount = payDebtorsAmmont.getText();
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("Select * from Debtors where Name=?");
            get.setString(1,name);
            resultSet = get.executeQuery();
            if(resultSet.next()){
                if(resultSet.getString("Amount").equals("0.0") | Amount.equals("")){
                    JOptionPane.showMessageDialog(null, "can't pay when not under debt");
                }else{
                    if( Float.valueOf(Amount) > Float.valueOf(resultSet.getString("Amount"))){
                        JOptionPane.showMessageDialog(null, "can't pay morethan your owed");
                    } else{
                        Float newAmmount = Float.valueOf(resultSet.getString("Amount")) - Float.valueOf(Amount);
                        update = connection.prepareStatement("update Debtors set Amount = ? where Name = ? ");
                        update.setString(1, String.valueOf(newAmmount));
                        update.setString(2, name);
                        update.executeUpdate();
                        
                        insert = connection.prepareStatement("insert into DebtorPayments(Date,Name,Ammount) values(?,?,?)");
                        insert.setString(1, displayCurrentDate());
                        insert.setString(2, name);
                        insert.setString(3, Amount);
                        insert.executeUpdate();
                        JOptionPane.showMessageDialog(null, "payment of "+Amount+" by "+name+" has been taken");
                        payDebtorsAmmont.setText("");
                        Pricestable();
                        Salestable();
                        DebtorsBalancetable();
                        DebtorsRecordstable();
                        DebtorsPaymentstable();
                    }
                }
            }
            
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "enter correct data");
        } catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Enter numbers pliz");
        }
    }//GEN-LAST:event_paymentsbtnActionPerformed

    private void searchPaymentsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPaymentsbtnActionPerformed
        String name = (String)payDebtorsName.getSelectedItem();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String date = sdf.format(payDebtorsDate.getDate());
        int c;
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from DebtorPayments where Date=? and Name=?");
            get.setString(1, date);
            get.setString(2, name);
            resultSet = get.executeQuery();
            ResultSetMetaData Rss = resultSet.getMetaData();
            c = Rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)debtorsPaymentsTable.getModel();
            df.setRowCount(0);
            while(resultSet.next()){
                Vector v2 = new Vector();
                for (int a=1; a<=c;a++){
                    v2.add(resultSet.getString("Date"));
                    v2.add(resultSet.getString("Name"));
                    v2.add(resultSet.getString("Ammount"));
                }
                df.addRow(v2);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "enter correct data");
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "select correct date" + ex.getMessage());
        } finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
                
            }
        }
    }//GEN-LAST:event_searchPaymentsbtnActionPerformed

    private void searchRecbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchRecbtnActionPerformed
        // TODO add your handling code here:
        String name = (String)searchDebtorsName.getSelectedItem();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String date = sdf.format(debtorsRecDate.getDate());
        int c;
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from productsDebtors where Date=? and Name=?");
            get.setString(1, date);
            get.setString(2, name);
            resultSet = get.executeQuery();
            ResultSetMetaData Rss = resultSet.getMetaData();
            c = Rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)debtorsRecordsTable.getModel();
            df.setRowCount(0);
            while(resultSet.next()){
                Vector v2 = new Vector();
                for (int a=1; a<=c;a++){
                    v2.add(resultSet.getString("Date"));
                    v2.add(resultSet.getString("Name"));
                    v2.add(resultSet.getString("Product"));
                    v2.add(resultSet.getString("Quantity"));
                }
                df.addRow(v2);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "enter correct data");
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, "select correct date" + ex.getMessage());
        } finally {
            try {
                resultSet.close();
                get.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
    }//GEN-LAST:event_searchRecbtnActionPerformed

    private void debtorsPaymentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_debtorsPaymentsTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)debtorsPaymentsTable.getModel();
        int selectedIndex = debtorsPaymentsTable.getSelectedRow();
        
        paymentId.setText(df.getValueAt(selectedIndex, 0).toString());  
    }//GEN-LAST:event_debtorsPaymentsTableMouseClicked

    private void deletePaymentbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePaymentbtnActionPerformed
        // TODO add your handling code here:
        String Id = paymentId.getText();
        try {
            connection = DatabaseConnection.getConnection();
            get = connection.prepareStatement("select * from DebtorPayments where Id = ?");
            get.setString(1, Id);
            resultSet = get.executeQuery();
            if(resultSet.next()){
                get1 = connection.prepareStatement("select * from Debtors where Name = ?");
                get1.setString(1, resultSet.getString("Name"));
                rs =get1.executeQuery();
                if(rs.next()){
                    float ammount = Float.valueOf(resultSet.getString("Ammount")) + Float.valueOf(rs.getString("Amount"));
                    update = connection.prepareStatement("update Debtors set Amount = ? where Name = ? ");
                    update.setString(1, String.valueOf(ammount));
                    update.setString(2, resultSet.getString("Name"));
                    update.executeUpdate();
                    
                    drop = connection.prepareStatement("delete from DebtorPayments where Id = ?");
                    drop.setString(1, Id);
                    drop.executeUpdate();
                    
                    paymentId.setText("");
                    JOptionPane.showMessageDialog(null, "payment of "+resultSet.getString("Ammount")+" by "+resultSet.getString("Name")+" has been deleted.");
                    Pricestable();
                    Salestable();
                    DebtorsBalancetable();
                    DebtorsRecordstable();
                    DebtorsPaymentstable();
                }else{
                    JOptionPane.showMessageDialog(null, "debtor "+resultSet.getString("Name")+" no longer exists");
                }
            } else{
                JOptionPane.showMessageDialog(null, " no payment doesn't exist");
            }
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        }   finally {
            try {
                resultSet.close();
                rs.close();
                get.close();
                get1.close();
                update.close();
                insert.close();
                drop.close();
                connection.close();
            } catch (Exception e) {
            }   
        }
        
        
    }//GEN-LAST:event_deletePaymentbtnActionPerformed

    private void clearAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAreaActionPerformed
        try {
            // TODO add your handling code here:
            connection = DatabaseConnection.getConnection();
            drop = connection.prepareStatement("delete from receiptAndinvo");
            drop.executeUpdate();
            
            recAndinvoArea.setText("");
            
        } catch (SQLException ex) {
            Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clearAreaActionPerformed

    private void printAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printAreaActionPerformed
        // TODO add your handling code here:
        String content = recAndinvoArea.getText();
        String name = reciAndinvoowner.getText();
        if(name.equals("")){
            JOptionPane.showMessageDialog(null, "Enter a name to print");
        }else{
            textWriter.writeTotxt(content+"\nCustomer Name: "+name+"\nServed By: "+username+"\nTime: "+displayCurrentTime(),username+" to "+name+"_"+displayCurrentTime()+".txt");
            try {
                // TODO add your handling code here:
                connection = DatabaseConnection.getConnection();
                drop = connection.prepareStatement("delete from receiptAndinvo");
                drop.executeUpdate();

                recAndinvoArea.setText("");

            } catch (SQLException ex) {
                Logger.getLogger(sales.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_printAreaActionPerformed

    private void reciAndinvoownerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reciAndinvoownerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reciAndinvoownerActionPerformed

    private void salesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salesTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)salesTable.getModel();
        int selectedIndex = salesTable.getSelectedRow();

        salesId.setText(df.getValueAt(selectedIndex, 0).toString());
        salesqty.setText(df.getValueAt(selectedIndex, 3).toString());

    }//GEN-LAST:event_salesTableMouseClicked

    
    
    /**
     * @param args the command line arguments
     */
    
    //public static void main(String args[]) {
        /*Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        */
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
            //public void run() {
                //new sales().setVisible(false);
            //}
        //});
    //}
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbtn;
    private javax.swing.JButton chngPsswdbtn;
    private javax.swing.JButton clearArea;
    private javax.swing.JButton debtSale;
    private javax.swing.JTable debtorsBalanceTable;
    private javax.swing.JComboBox<String> debtorsName;
    private javax.swing.JTable debtorsPaymentsTable;
    private com.toedter.calendar.JDateChooser debtorsRecDate;
    private javax.swing.JTable debtorsRecordsTable;
    private javax.swing.JButton deletePaymentbtn;
    private javax.swing.JButton deletebtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField payDebtorsAmmont;
    private com.toedter.calendar.JDateChooser payDebtorsDate;
    private javax.swing.JComboBox<String> payDebtorsName;
    private javax.swing.JTextField paymentId;
    private javax.swing.JButton paymentsbtn;
    private javax.swing.JTable pricesTable;
    private javax.swing.JButton printArea;
    private javax.swing.JTextArea recAndinvoArea;
    private javax.swing.JTextField reciAndinvoowner;
    private javax.swing.JTextField salesId;
    private javax.swing.JComboBox<String> salesProductcombo;
    private javax.swing.JTable salesTable;
    private javax.swing.JButton salesbtn;
    private javax.swing.JTextField salesqty;
    private javax.swing.JComboBox<String> searchDebtorsName;
    private javax.swing.JButton searchPaymentsbtn;
    private javax.swing.JButton searchRecbtn;
    private javax.swing.JTextField usersName;
    // End of variables declaration//GEN-END:variables
}
